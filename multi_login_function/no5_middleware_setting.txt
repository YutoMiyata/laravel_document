//ミドルウェアの設定
(App\Http\Middleware/Authenticate.phpを編集する)
(App\Http\Middleware/RedirectIfAuthenticated.phpを編集する)


//Authenticate.php

❶ protected $user_route = 'user.login';
   protected $owner_route = 'owner.login';
   protected $admin_route = 'admin.login'; の記載


❷redirectTo(){} 内の書き換え。

❸Routeファサードを読み込む
use Illuminate\Support\Facades\Route;



完成形は下記に記載。


<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Support\Facades\Route;

class Authenticate extends Middleware
{

    protected $user_route = 'user.login';
    protected $owner_route = 'owner.login';
    protected $admin_route = 'admin.login';
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return string|null
     */
    protected function redirectTo($request)
    {
        if (! $request->expectsJson()) {
            if(Route::is('owner.*')){
                return route($this->owner_route);
            } elseif(Route::is('admin.*')){
                return route($this->admin_route);
            } else {
                return route($this->user_route);
            }
        }
    }
}

//RedirectIfAuthenticated.php

❶ガードプロパティの設定

    private const GUARD_USER = 'users';   //config\auth.phpのgurad設定の名前と合わせる
    private const GUARD_OWNER = 'owners'; //config\auth.phpのgurad設定の名前と合わせる
    private const GUARD_ADMIN= 'admin';   //config\auth.phpのgurad設定の名前と合わせる

❷handleメソッド内の関数をカスタマイズ

ex.

    if(Auth::guard(self::GUARD_USER)->check() && $request->routeIs('user.*'))  {
        return redirect(RouteServiceProvider::HOME);
    }

    if(Auth::guard(self::GUARD_OWNER)->check() && $request->routeIs('owner.*'))  {
        return redirect(RouteServiceProvider::OWNER_HOME);
    }

    if(Auth::guard(self::GUARD_ADMIN)->check() && $request->routeIs('admin.*'))  {
        return redirect(RouteServiceProvider::ADMIN_HOME);
    }


完成形は下記に記載。

<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class RedirectIfAuthenticated
{
    private const GUARD_USER = 'users';   //config\auth.phpのgurad設定の名前と合わせる
    private const GUARD_OWNER = 'owners'; //config\auth.phpのgurad設定の名前と合わせる
    private const GUARD_ADMIN= 'admin';   //config\auth.phpのgurad設定の名前と合わせる
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @param  string|null  ...$guards
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next, ...$guards)
    {
        // $guards = empty($guards) ? [null] : $guards;

        // foreach ($guards as $guard) {
        //     if (Auth::guard($guard)->check()) {
        //         return redirect(RouteServiceProvider::HOME);
        //     }
        // }
        if(Auth::guard(self::GUARD_USER)->check() && $request->routeIs('user.*'))  {
            return redirect(RouteServiceProvider::HOME);
        }

        if(Auth::guard(self::GUARD_OWNER)->check() && $request->routeIs('owner.*'))  {
            return redirect(RouteServiceProvider::OWNER_HOME);
        }

        if(Auth::guard(self::GUARD_ADMIN)->check() && $request->routeIs('admin.*'))  {
            return redirect(RouteServiceProvider::ADMIN_HOME);
        }

        
        return $next($request);
    }
}

